// Mocks generated by Mockito 5.4.4 from annotations
// in stacks_logistics/test/features/container_tracking/presentation/blocs/container_tracking_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/create_container.dart'
    as _i7;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/delete_container.dart'
    as _i9;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/get_all_containers.dart'
    as _i2;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/get_container_by_id.dart'
    as _i3;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/get_containers_by_priority.dart'
    as _i6;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/get_containers_by_status.dart'
    as _i5;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/search_containers.dart'
    as _i4;
import 'package:stacks_logistics/features/container_tracking/domain/use_cases/update_container.dart'
    as _i8;
import 'package:stacks_logistics/features/container_tracking/presentation/blocs/container_tracking_bloc.dart'
    as _i11;
import 'package:stacks_logistics/features/container_tracking/presentation/blocs/container_tracking_event.dart'
    as _i13;
import 'package:stacks_logistics/features/container_tracking/presentation/blocs/container_tracking_state.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAllContainers_0 extends _i1.SmartFake
    implements _i2.GetAllContainers {
  _FakeGetAllContainers_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetContainerById_1 extends _i1.SmartFake
    implements _i3.GetContainerById {
  _FakeGetContainerById_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchContainers_2 extends _i1.SmartFake
    implements _i4.SearchContainers {
  _FakeSearchContainers_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetContainersByStatus_3 extends _i1.SmartFake
    implements _i5.GetContainersByStatus {
  _FakeGetContainersByStatus_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetContainersByPriority_4 extends _i1.SmartFake
    implements _i6.GetContainersByPriority {
  _FakeGetContainersByPriority_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateContainer_5 extends _i1.SmartFake
    implements _i7.CreateContainer {
  _FakeCreateContainer_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateContainer_6 extends _i1.SmartFake
    implements _i8.UpdateContainer {
  _FakeUpdateContainer_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteContainer_7 extends _i1.SmartFake
    implements _i9.DeleteContainer {
  _FakeDeleteContainer_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContainerTrackingState_8 extends _i1.SmartFake
    implements _i10.ContainerTrackingState {
  _FakeContainerTrackingState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContainerTrackingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainerTrackingBloc extends _i1.Mock
    implements _i11.ContainerTrackingBloc {
  MockContainerTrackingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllContainers get getAllContainers => (super.noSuchMethod(
        Invocation.getter(#getAllContainers),
        returnValue: _FakeGetAllContainers_0(
          this,
          Invocation.getter(#getAllContainers),
        ),
      ) as _i2.GetAllContainers);

  @override
  _i3.GetContainerById get getContainerById => (super.noSuchMethod(
        Invocation.getter(#getContainerById),
        returnValue: _FakeGetContainerById_1(
          this,
          Invocation.getter(#getContainerById),
        ),
      ) as _i3.GetContainerById);

  @override
  _i4.SearchContainers get searchContainers => (super.noSuchMethod(
        Invocation.getter(#searchContainers),
        returnValue: _FakeSearchContainers_2(
          this,
          Invocation.getter(#searchContainers),
        ),
      ) as _i4.SearchContainers);

  @override
  _i5.GetContainersByStatus get getContainersByStatus => (super.noSuchMethod(
        Invocation.getter(#getContainersByStatus),
        returnValue: _FakeGetContainersByStatus_3(
          this,
          Invocation.getter(#getContainersByStatus),
        ),
      ) as _i5.GetContainersByStatus);

  @override
  _i6.GetContainersByPriority get getContainersByPriority =>
      (super.noSuchMethod(
        Invocation.getter(#getContainersByPriority),
        returnValue: _FakeGetContainersByPriority_4(
          this,
          Invocation.getter(#getContainersByPriority),
        ),
      ) as _i6.GetContainersByPriority);

  @override
  _i7.CreateContainer get createContainer => (super.noSuchMethod(
        Invocation.getter(#createContainer),
        returnValue: _FakeCreateContainer_5(
          this,
          Invocation.getter(#createContainer),
        ),
      ) as _i7.CreateContainer);

  @override
  _i8.UpdateContainer get updateContainer => (super.noSuchMethod(
        Invocation.getter(#updateContainer),
        returnValue: _FakeUpdateContainer_6(
          this,
          Invocation.getter(#updateContainer),
        ),
      ) as _i8.UpdateContainer);

  @override
  _i9.DeleteContainer get deleteContainer => (super.noSuchMethod(
        Invocation.getter(#deleteContainer),
        returnValue: _FakeDeleteContainer_7(
          this,
          Invocation.getter(#deleteContainer),
        ),
      ) as _i9.DeleteContainer);

  @override
  _i10.ContainerTrackingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeContainerTrackingState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.ContainerTrackingState);

  @override
  _i12.Stream<_i10.ContainerTrackingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i12.Stream<_i10.ContainerTrackingState>.empty(),
      ) as _i12.Stream<_i10.ContainerTrackingState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i13.ContainerTrackingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.ContainerTrackingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.ContainerTrackingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.ContainerTrackingEvent>(
    _i14.EventHandler<E, _i10.ContainerTrackingState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i14.Transition<_i13.ContainerTrackingEvent,
                  _i10.ContainerTrackingState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void onChange(_i14.Change<_i10.ContainerTrackingState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
