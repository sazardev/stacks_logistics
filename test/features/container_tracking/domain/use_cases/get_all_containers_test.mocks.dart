// Mocks generated by Mockito 5.4.4 from annotations
// in stacks_logistics/test/features/container_tracking/domain/use_cases/get_all_containers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacks_logistics/core/error/failures.dart' as _i5;
import 'package:stacks_logistics/features/container_tracking/domain/entities/container.dart'
    as _i6;
import 'package:stacks_logistics/features/container_tracking/domain/repository_interfaces/container_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContainerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainerRepository extends _i1.Mock
    implements _i3.ContainerRepository {
  MockContainerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>> getAllContainers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllContainers,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Container>>(
          this,
          Invocation.method(
            #getAllContainers,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Container>> getContainerById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainerById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Container>>.value(
            _FakeEither_0<_i5.Failure, _i6.Container>(
          this,
          Invocation.method(
            #getContainerById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Container>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>
      getContainersByStatus(_i6.ContainerStatus? status) => (super.noSuchMethod(
            Invocation.method(
              #getContainersByStatus,
              [status],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Container>>(
              this,
              Invocation.method(
                #getContainersByStatus,
                [status],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>> searchContainers(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchContainers,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Container>>(
          this,
          Invocation.method(
            #searchContainers,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Container>> createContainer(
          _i6.Container? container) =>
      (super.noSuchMethod(
        Invocation.method(
          #createContainer,
          [container],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Container>>.value(
            _FakeEither_0<_i5.Failure, _i6.Container>(
          this,
          Invocation.method(
            #createContainer,
            [container],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Container>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Container>> updateContainer(
          _i6.Container? container) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContainer,
          [container],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Container>>.value(
            _FakeEither_0<_i5.Failure, _i6.Container>(
          this,
          Invocation.method(
            #updateContainer,
            [container],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Container>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteContainer(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteContainer,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteContainer,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addTrackingEntry(
    String? containerId,
    _i6.TrackingEntry? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTrackingEntry,
          [
            containerId,
            entry,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addTrackingEntry,
            [
              containerId,
              entry,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TrackingEntry>>>
      getTrackingHistory(String? containerId) => (super.noSuchMethod(
            Invocation.method(
              #getTrackingHistory,
              [containerId],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.TrackingEntry>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TrackingEntry>>(
              this,
              Invocation.method(
                #getTrackingHistory,
                [containerId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TrackingEntry>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> syncData() => (super.noSuchMethod(
        Invocation.method(
          #syncData,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #syncData,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>
      getOverdueContainers() => (super.noSuchMethod(
            Invocation.method(
              #getOverdueContainers,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Container>>(
              this,
              Invocation.method(
                #getOverdueContainers,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>
      getContainersByPriority(_i6.Priority? priority) => (super.noSuchMethod(
            Invocation.method(
              #getContainersByPriority,
              [priority],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Container>>(
              this,
              Invocation.method(
                #getContainersByPriority,
                [priority],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>> bulkUpdateContainers(
          List<_i6.Container>? containers) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkUpdateContainers,
          [containers],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Container>>(
          this,
          Invocation.method(
            #bulkUpdateContainers,
            [containers],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>
      getContainersByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getContainersByDateRange,
              [
                startDate,
                endDate,
              ],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Container>>(
              this,
              Invocation.method(
                #getContainersByDateRange,
                [
                  startDate,
                  endDate,
                ],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Container>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> exportContainerData(
          List<String>? containerIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportContainerData,
          [containerIds],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #exportContainerData,
            [containerIds],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
