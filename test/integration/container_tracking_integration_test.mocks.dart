// Mocks generated by Mockito 5.4.4 from annotations
// in stacks_logistics/test/integration/container_tracking_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:connectivity_plus/connectivity_plus.dart' as _i9;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:stacks_logistics/core/error/failures.dart' as _i14;
import 'package:stacks_logistics/core/services/container_notification_service.dart'
    as _i11;
import 'package:stacks_logistics/features/container_tracking/data/data_sources/container_local_data_source.dart'
    as _i5;
import 'package:stacks_logistics/features/container_tracking/data/data_sources/container_remote_data_source.dart'
    as _i7;
import 'package:stacks_logistics/features/container_tracking/data/models/container_model.dart'
    as _i2;
import 'package:stacks_logistics/features/container_tracking/domain/entities/container.dart'
    as _i12;
import 'package:stacks_logistics/features/notifications/domain/entities/app_notification.dart'
    as _i13;
import 'package:stacks_logistics/features/notifications/domain/repository_interfaces/notification_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContainerModel_0 extends _i1.SmartFake
    implements _i2.ContainerModel {
  _FakeContainerModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationRepository_1 extends _i1.SmartFake
    implements _i3.NotificationRepository {
  _FakeNotificationRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContainerLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainerLocalDataSource extends _i1.Mock
    implements _i5.ContainerLocalDataSource {
  MockContainerLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ContainerModel>> getAllContainers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllContainers,
          [],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<_i2.ContainerModel?> getContainerById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainerById,
          [id],
        ),
        returnValue: _i6.Future<_i2.ContainerModel?>.value(),
      ) as _i6.Future<_i2.ContainerModel?>);

  @override
  _i6.Future<List<_i2.ContainerModel>> searchContainers(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchContainers,
          [query],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<void> cacheContainer(_i2.ContainerModel? container) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheContainer,
          [container],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> cacheContainers(List<_i2.ContainerModel>? containers) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheContainers,
          [containers],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteContainer(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteContainer,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> isContainerCached(String? id) => (super.noSuchMethod(
        Invocation.method(
          #isContainerCached,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i2.ContainerModel>> getContainersByStatus(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainersByStatus,
          [status],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<List<_i2.ContainerModel>> getContainersByPriority(
          String? priority) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainersByPriority,
          [priority],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<DateTime?> getLastSyncTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastSyncTime,
          [],
        ),
        returnValue: _i6.Future<DateTime?>.value(),
      ) as _i6.Future<DateTime?>);

  @override
  _i6.Future<void> setLastSyncTime(DateTime? syncTime) => (super.noSuchMethod(
        Invocation.method(
          #setLastSyncTime,
          [syncTime],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ContainerRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainerRemoteDataSource extends _i1.Mock
    implements _i7.ContainerRemoteDataSource {
  MockContainerRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ContainerModel>> getAllContainers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllContainers,
          [],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<_i2.ContainerModel> getContainerById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainerById,
          [id],
        ),
        returnValue: _i6.Future<_i2.ContainerModel>.value(_FakeContainerModel_0(
          this,
          Invocation.method(
            #getContainerById,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.ContainerModel>);

  @override
  _i6.Future<List<_i2.ContainerModel>> searchContainers(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchContainers,
          [query],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<String> createContainer(_i2.ContainerModel? container) =>
      (super.noSuchMethod(
        Invocation.method(
          #createContainer,
          [container],
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #createContainer,
            [container],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> updateContainer(_i2.ContainerModel? container) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContainer,
          [container],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteContainer(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteContainer,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i2.ContainerModel>> getContainersByStatus(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainersByStatus,
          [status],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<List<_i2.ContainerModel>> getContainersByPriority(
          String? priority) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainersByPriority,
          [priority],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Future<List<_i2.ContainerModel>> getContainersByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContainersByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);

  @override
  _i6.Stream<_i2.ContainerModel> watchContainer(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchContainer,
          [id],
        ),
        returnValue: _i6.Stream<_i2.ContainerModel>.empty(),
      ) as _i6.Stream<_i2.ContainerModel>);

  @override
  _i6.Stream<List<_i2.ContainerModel>> watchAllContainers() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllContainers,
          [],
        ),
        returnValue: _i6.Stream<List<_i2.ContainerModel>>.empty(),
      ) as _i6.Stream<List<_i2.ContainerModel>>);

  @override
  _i6.Future<List<_i2.ContainerModel>> getRecentContainers({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentContainers,
          [],
          {#limit: limit},
        ),
        returnValue:
            _i6.Future<List<_i2.ContainerModel>>.value(<_i2.ContainerModel>[]),
      ) as _i6.Future<List<_i2.ContainerModel>>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i9.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i10.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i6.Stream<_i10.ConnectivityResult>.empty(),
      ) as _i6.Stream<_i10.ConnectivityResult>);

  @override
  _i6.Future<_i10.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i6.Future<_i10.ConnectivityResult>.value(
            _i10.ConnectivityResult.bluetooth),
      ) as _i6.Future<_i10.ConnectivityResult>);
}

/// A class which mocks [ContainerNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainerNotificationService extends _i1.Mock
    implements _i11.ContainerNotificationService {
  MockContainerNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_1(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i3.NotificationRepository);

  @override
  _i6.Future<void> onContainerStatusChanged({
    required _i12.Container? container,
    required _i12.ContainerStatus? oldStatus,
    required _i12.ContainerStatus? newStatus,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onContainerStatusChanged,
          [],
          {
            #container: container,
            #oldStatus: oldStatus,
            #newStatus: newStatus,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> onContainerDelivered({required _i12.Container? container}) =>
      (super.noSuchMethod(
        Invocation.method(
          #onContainerDelivered,
          [],
          {#container: container},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> onContainerDelayed({
    required _i12.Container? container,
    required String? reason,
    required DateTime? expectedDelivery,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onContainerDelayed,
          [],
          {
            #container: container,
            #reason: reason,
            #expectedDelivery: expectedDelivery,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> onContainerLocationUpdated({
    required _i12.Container? container,
    required String? previousLocation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onContainerLocationUpdated,
          [],
          {
            #container: container,
            #previousLocation: previousLocation,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> onContainerDamaged({
    required _i12.Container? container,
    required String? damageDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onContainerDamaged,
          [],
          {
            #container: container,
            #damageDescription: damageDescription,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> subscribeToContainerUpdates(String? containerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToContainerUpdates,
          [containerId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> unsubscribeFromContainerUpdates(String? containerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromContainerUpdates,
          [containerId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> subscribeToGeneralUpdates() => (super.noSuchMethod(
        Invocation.method(
          #subscribeToGeneralUpdates,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> createSystemAnnouncement({
    required String? title,
    required String? body,
    _i13.NotificationPriority? priority = _i13.NotificationPriority.medium,
    String? imageUrl,
    DateTime? expiresAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSystemAnnouncement,
          [],
          {
            #title: title,
            #body: body,
            #priority: priority,
            #imageUrl: imageUrl,
            #expiresAt: expiresAt,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i3.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i4.Either<_i14.Failure, _i13.AppNotification>>
      get notificationStream => (super.noSuchMethod(
            Invocation.getter(#notificationStream),
            returnValue: _i6
                .Stream<_i4.Either<_i14.Failure, _i13.AppNotification>>.empty(),
          ) as _i6.Stream<_i4.Either<_i14.Failure, _i13.AppNotification>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>
      getAllNotifications() => (super.noSuchMethod(
            Invocation.method(
              #getAllNotifications,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i14.Failure, List<_i13.AppNotification>>>.value(
                _FakeEither_2<_i14.Failure, List<_i13.AppNotification>>(
              this,
              Invocation.method(
                #getAllNotifications,
                [],
              ),
            )),
          ) as _i6
              .Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, int>> getUnreadNotificationsCount() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnreadNotificationsCount,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, int>>.value(
            _FakeEither_2<_i14.Failure, int>(
          this,
          Invocation.method(
            #getUnreadNotificationsCount,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, int>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>
      getNotificationsByType(_i13.NotificationType? type) =>
          (super.noSuchMethod(
            Invocation.method(
              #getNotificationsByType,
              [type],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i14.Failure, List<_i13.AppNotification>>>.value(
                _FakeEither_2<_i14.Failure, List<_i13.AppNotification>>(
              this,
              Invocation.method(
                #getNotificationsByType,
                [type],
              ),
            )),
          ) as _i6
              .Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>
      getNotificationsByPriority(_i13.NotificationPriority? priority) =>
          (super.noSuchMethod(
            Invocation.method(
              #getNotificationsByPriority,
              [priority],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i14.Failure, List<_i13.AppNotification>>>.value(
                _FakeEither_2<_i14.Failure, List<_i13.AppNotification>>(
              this,
              Invocation.method(
                #getNotificationsByPriority,
                [priority],
              ),
            )),
          ) as _i6
              .Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>
      getNotificationsByContainer(String? containerId) => (super.noSuchMethod(
            Invocation.method(
              #getNotificationsByContainer,
              [containerId],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i14.Failure, List<_i13.AppNotification>>>.value(
                _FakeEither_2<_i14.Failure, List<_i13.AppNotification>>(
              this,
              Invocation.method(
                #getNotificationsByContainer,
                [containerId],
              ),
            )),
          ) as _i6
              .Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> markAsRead(
          String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [notificationId],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #markAsRead,
            [notificationId],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> markAllAsRead() =>
      (super.noSuchMethod(
        Invocation.method(
          #markAllAsRead,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #markAllAsRead,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> deleteNotification(
          String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [notificationId],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #deleteNotification,
            [notificationId],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> deleteAllNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllNotifications,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #deleteAllNotifications,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, _i13.AppNotification>> createNotification(
          _i13.AppNotification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotification,
          [notification],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i14.Failure, _i13.AppNotification>>.value(
                _FakeEither_2<_i14.Failure, _i13.AppNotification>(
          this,
          Invocation.method(
            #createNotification,
            [notification],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, _i13.AppNotification>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, String?>> initializeFCM() =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeFCM,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, String?>>.value(
            _FakeEither_2<_i14.Failure, String?>(
          this,
          Invocation.method(
            #initializeFCM,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, String?>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToTopic,
          [topic],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #subscribeToTopic,
            [topic],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> unsubscribeFromTopic(
          String? topic) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromTopic,
          [topic],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #unsubscribeFromTopic,
            [topic],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> updateFCMToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFCMToken,
          [token],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #updateFCMToken,
            [token],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, String?>> getFCMToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFCMToken,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, String?>>.value(
            _FakeEither_2<_i14.Failure, String?>(
          this,
          Invocation.method(
            #getFCMToken,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, String?>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> clearLocalNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalNotifications,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #clearLocalNotifications,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>
      syncNotifications() => (super.noSuchMethod(
            Invocation.method(
              #syncNotifications,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i14.Failure, List<_i13.AppNotification>>>.value(
                _FakeEither_2<_i14.Failure, List<_i13.AppNotification>>(
              this,
              Invocation.method(
                #syncNotifications,
                [],
              ),
            )),
          ) as _i6
              .Future<_i4.Either<_i14.Failure, List<_i13.AppNotification>>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, _i3.NotificationSettings>>
      getNotificationSettings() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationSettings,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i14.Failure, _i3.NotificationSettings>>.value(
                _FakeEither_2<_i14.Failure, _i3.NotificationSettings>(
              this,
              Invocation.method(
                #getNotificationSettings,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i14.Failure, _i3.NotificationSettings>>);

  @override
  _i6.Future<_i4.Either<_i14.Failure, void>> updateNotificationSettings(
          _i3.NotificationSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotificationSettings,
          [settings],
        ),
        returnValue: _i6.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #updateNotificationSettings,
            [settings],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i14.Failure, void>>);
}
